JavaScript 中的数组是一种非常强大且灵活的数据结构，它允许你存储和操作一系列的值。这些值可以是数字、字符串、对象或其他数组等任何数据类型。JavaScript 的数组是动态的，这意味着数组的大小可以随元素的添加或删除而自动变化。以下是关于 JavaScript 数组的一些关键内容：

### 1. 创建数组

- **使用数组字面量**：这是最常见的创建数组的方法，通过方括号 `[]` 包含一系列由逗号分隔的元素。
  ```javascript
  let fruits = ['Apple', 'Banana', 'Cherry'];
  let nums=[1,2,3];
  ```

- **使用 `Array` 构造函数**：可以通过 `Array` 构造函数来创建一个新数组。
  ```javascript
  let numbers = new Array(1, 2, 3, 4, 5);
  // 或者指定数组长度（但数组会初始化为空）
  let emptyArray = new Array(5); // 长度为5的空数组
  ```

### 2. 访问数组元素

- 使用索引（或下标）来访问数组中的元素。索引从 0 开始。
  ```javascript
  let fruits = ['Apple', 'Banana', 'Cherry'];
  console.log(fruits[0]); // 输出: Apple
  console.log(fruits);//输出整个数组
  ```

### .join()
~~~
let arr=[1,2,3,4];
console.log(arr.join())//输出：1,2,3,4

console.log(arr.join("|"))//输出1|2|3|4
console.log(arr.join(""))//输出1234  
~~~
#### 如果数组元素是undefined或null或空位，会被转换成字符串
~~~
[undefined,null].join('#');
// '#'

['a',,'b'].join('-');
//'a--b'
~~~
####
~~~
let arr=["hello","world"];
let result=arr.join(" ");//hello world
console.log(result.spilt(" "));//["hello","world"] 通过.spilt的方式将字符串以空格“ ”分割成数组中的元素并变成数组
~~~


### 3. 数组长度

- 数组的 `length` 属性表示数组中元素的数量。
  ```javascript
  let numbers = [1, 2, 3, 4, 5];
  console.log(numbers.length); // 输出: 5
  ```

- `length` 属性可以被修改，以改变数组的大小。
  ```javascript
  numbers.length = 3; // 现在 numbers 变成了 [1, 2, 3]
  ```

### 4. 遍历数组

- **使用 `for` 循环**：
  ```javascript
  let numbers = [1, 2, 3, 4, 5];
  for (let i = 0; i < numbers.length; i++) {
    console.log(numbers[i]);
  }
  ```
- **使用`for...in` 方法**
~~~
const refrigerator = {
  'milk': 1,
  'eggs': 12,
};

for (const food in refrigerator) {
  console.log(food, refrigerator[food]);
}
~~~

- **使用 `forEach` 方法**：
  ```javascript
  numbers.forEach(function(number) {
    console.log(number);
  });
  ```

- **使用 `for...of` 循环**（ES6+）：
  ```javascript
  for (let number of numbers) {
    console.log(number); 
  }
  ```

### 5. 数组方法

JavaScript 提供了大量的数组方法来操作数组，包括但不限于：

- **添加元素**：`push()`(重尾部), `unshift()`（重首部）, `slice()`
- **删除元素**：`pop()`（重尾部）, `shift()`（重首部）, `splice()`
- **搜索元素**：`indexOf()`, `find()`, `findIndex()`
- **排序和反转**：`sort()`, `reverse()`
- **连接数组**：`concat()`
- **迭代方法**：`forEach()`, `map()`, `filter()`, `reduce()`, `some()`, `every()`



在JavaScript中，数组是一种非常强大的数据结构，它提供了多种方法来操作数组中的元素。下面将详细介绍你提到的这些方法：

#### 添加元素
- concat 组合两个数组
- 
Concatenation 意思是将元素连接到尾部。 同理，JavaScript 为字符串和数组提供了concat方法。 对数组来说，在一个数组上调用 concat 方法，然后提供另一个数组作为参数添加到第一个数组末尾。 它返回一个新数组，不会改变任何一个原始数组。 举个例子：
~~~
[1, 2, 3].concat([4, 5, 6]);
返回的数组将是 [1, 2, 3, 4, 5, 6]。
~~~

- **` slice()`**:slice() 不会修改数组，而是会复制，或者说*提取（extract）*给定数量的元素到一个新数组。 slice() 只接收 2 个输入参数：第一个是开始提取元素的位置（索引），第二个是提取元素的结束位置（索引）。 提取的元素中不包括第二个参数所对应的元素。 如下示例：
```
let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];

let todaysWeather = weatherConditions.slice(1, 3);

todaysWeather 值为 ['snow', 'sleet']，weatherConditions 值仍然为 ['rain', 'snow', 'sleet', 'hail', 'clear']。

在上面的代码中，我们从一个数组中提取了一些元素，并用这些元素创建了一个新数组。


```


- **`push()`**：在数组的末尾添加一个或多个元素（或是一整个数组），并返回新的长度。
  ```javascript
  let arr = [1, 2, 3];
  arr.push(4, 5);
  console.log(arr); // [1, 2, 3, 4, 5]
  ```

- **`unshift()`**：在数组的开头添加一个或多个元素，并返回新的长度。
  ```javascript
  let arr = [1, 2, 3];
  arr.unshift(0);
  console.log(arr); // [0, 1, 2, 3]
  ```

- **`splice()`**：用于添加、删除或替换数组的元素。添加元素时，需指定开始位置、删除的元素数量（为0表示不删除）和要添加的新元素。

- splice(开始删除位置,删除元素数量，在删除处需要添加的新元素。。。。)
  ```javascript
  let arr = [1, 2, 3];
  arr.splice(1, 0, 'a', 'b'); // 从索引1开始，不删除元素，添加'a'和'b'
  console.log(arr); // [1, 'a', 'b', 2, 3]
  ```

#### 删除元素

- **`pop()`**：删除并返回数组的最后一个元素。
  ```javascript
  let arr = [1, 2, 3];
  let last = arr.pop();
  console.log(arr); // [1, 2]
  console.log(last); // 3
  ```

- **`shift()`**：删除并返回数组的第一个元素。
  ```javascript
  let arr = [1, 2, 3];
  let first = arr.shift();
  console.log(arr); // [2, 3]
  console.log(first); // 1
  ```

- **`splice()`**（再次提及）：也可以用于删除元素，通过指定开始位置和要删除的元素数量。
  ```javascript
  let arr = [1, 2, 3, 4, 5];
  arr.splice(1, 2); // 从索引1开始，删除2个元素
  console.log(arr); // [1, 4, 5]
  ```

#### 搜索元素

- **`indexOf()`**：返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。
  ```javascript
  let arr = [2, 5, 9];
  console.log(arr.indexOf(2)); // 0
  console.log(arr.indexOf(7)); // -1
  ```

- **`find()`**：返回数组中满足提供的测试函数的第一个元素的值。否则返回`undefined`。
  ```javascript
  let arr = [5, 12, 8, 130, 44];
  let found = arr.find(element => element > 10);
  console.log(found); // 12
  ```

- **`findIndex()`**：返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。
  ```javascript
  let arr = [5, 12, 8, 130, 44];
  let index = arr.findIndex(element => element > 10);
  console.log(index); // 1
  ```
- **` .hasOwnProperty`**:
要检查某个对象是否具有一个属性，你可以使用 .hasOwnProperty() 方法。 根据对象是否具有该属性，someObject.hasOwnProperty(someProperty) 返回 true 或 false。
~~~
function checkForProperty(object, property) {
  return object.hasOwnProperty(property);
}

checkForProperty({ top: 'hat', bottom: 'pants' }, 'top'); // true
checkForProperty({ top: 'hat', bottom: 'pants' }, 'middle'); // false
~~~
- **`in`**:与- .hasOwnProperty同理
```
users.hasOwnProperty('Alan');
'Alan' in users;
两者都为true
```

#### 排序和反转

- **`sort()`**：对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。
  ```javascript
  let arr = [30, 1, 4, 100, 3];
  arr.sort();
  console.log(arr); // [1, 100, 3, 30, 4]，因为默认按字符串排序
  arr.sort((a, b) => a - b); // 自定义排序
  console.log(arr); // [1, 3, 4, 30, 100]
  ```

- **`reverse()`**：反转数组的元素顺序，并返回数组。
  ```javascript
  let arr = [1, 2, 3];
  arr.reverse();
  console.log(arr); // [3, 2, 1]
  ```


### 6. 多维数组

JavaScript 支持多维数组，即数组的数组。

```javascript
let matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

例如 matrix[2][1]=8
```

多维数组允许你表示更复杂的数据结构，如矩阵或表格数据
。
```
let nestedArray = [
  ['deep'],
  [
    ['deeper'], ['deeper'] 
  ],
  [
    [
      ['deepest'], ['deepest']
    ],
    [
      [
        ['deepest-est?']
      ]
    ]
  ]
];


console.log(nestedArray[2][1][0][0][0]);
控制台打印的是字符串 deepest-est?。 既然我们知道数据的位置，当然，我们也可以修改它：

nestedArray[2][1][0][0][0] = 'deeper still';

console.log(nestedArray[2][1][0][0][0]);
现在控制台打印的是 deeper still。



```

### 7. 数组与类数组对象

有些对象（如函数的 `arguments` 对象和 DOM 元素的 `NodeList`）表现得像数组，但实际上并不是数组实例。你可以使用 `Array.from()` 方法或扩展运算符 `...` 将它们转换成真正的数组。

JavaScript 的数组是一个功能丰富的集合，支持高效的数据存储和操作。掌握这些基础知识和技巧对于编写高效和可维护的 JavaScript 代码至关重要。


## 复制数组

### 使用展开运算符复制数组“...”
我们已经定义了一个 copyMachine 函数，它接受 arr（一个数组）和 num（一个数字）作为输入参数。 该函数需要返回一个由 num 个 arr 组成的新的二维数组。 同时，我们写好了大致的流程，只是细节实现还没有写完。 请修改这个函数，使用展开语法，使该函数能正常工作（提示：我们已经学到过的一个方法很适合用在这里）！
~~~
function copyMachine(arr, num) {
  let newArr = [];
  while (num >= 1) {
    // 只修改这一行下面的代码
    newArr.push([...arr])
    // 只修改这一行上面的代码
    num--;
  }
  return newArr;
}

console.log(copyMachine([true, false, true], 2));


console结果:[ [ true, false, true ], [ true, false, true ] ]
~~~

### 使用展开运算符组合数组“...”
展开语法（spread）的另一个重要用途是合并数组，或者将某个数组的所有元素插入到另一个数组的任意位置。 我们也可以使用 ES5 的语法连接两个数组，但只能让它们首尾相接。 而展开语法可以让这样的操作变得极其简单：
~~~
let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];

let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
thatArray 会有值 ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']

~~~