在JavaScript中，`Map` 是一种集合类型，它存储键值对（key-value pairs），其中每个键都是唯一的，并且一个键可以映射到最多一个值。与普通的对象（Object）相比，`Map` 有几个关键的不同点：

1. **键的类型**：`Map` 的键可以是任意类型，包括函数、对象或任何原始类型（`number`、`string`、`boolean`、`undefined`、`null`，但`null`和`undefined`通常被当作 `"null"` 和 `"undefined"` 字符串处理）。而普通对象的键只能是字符串或Symbol。

2. **顺序**：`Map` 保持键值对的插入顺序，使得它可以被迭代为插入顺序的序列。而对象的属性顺序在ES2015之前是不确定的，虽然ES2015之后大多数现代JavaScript引擎会按照创建时的顺序来枚举对象的属性，但这并不是官方语言规范的一部分。

3. **大小**：`Map` 有一个内置的 `size` 属性，返回Map中键值对的数量。而获取一个对象的属性数量则需要手动计算。

4. **性能**：对于大型数据集，`Map` 的性能通常优于对象，因为Map是为键值对存储而优化的，而对象还需要处理一些其他的特性，如属性枚举和继承。

### 创建Map

你可以使用 `new Map()` 来创建一个空的Map，或者使用带有键值对数组的 `new Map(iterable)` 来初始化Map。

```javascript
// 创建一个空的Map
let myMap = new Map();

// 使用数组初始化Map
let myMapWithInitialData = new Map([
  ['key1', 'value1'],
  ['key2', 'value2'],
  // ...
]);
```

### Map的方法

Map提供了一系列的方法用于操作键值对，包括添加、删除、查找和遍历等。

- `set(key, value)`：设置`Map`中键的值。如果键已经存在，则更新其值；否则，将新键值对添加到`Map`中。
- `get(key)`：返回键对应的值，如果不存在，则返回`undefined`。
- `has(key)`：返回一个布尔值，表示Map中是否存在该键。
- `delete(key)`：从Map中删除键及其对应的值，并返回`true`。如果Map不包含该键，则返回`false`。
- `clear()`：移除Map中的所有键值对。
- `size`：只读属性，返回Map中键值对的数量。
- `keys()`、`values()`、`entries()`：分别返回一个新的迭代器对象，该对象包含Map对象中每个元素的键、值或[键，值]数组。
- `forEach(callbackFn[, thisArg])`：按插入顺序，为Map对象中的每个键值对执行一次提供的回调函数。

### 示例

```javascript
let myMap = new Map();

myMap.set('a', 1);
myMap.set('b', 2);

console.log(myMap.get('a')); // 输出: 1
console.log(myMap.has('b')); // 输出: true

myMap.forEach((value, key) => {
  console.log(key + ' = ' + value);
});
// 输出:
// a = 1
// b = 2

console.log(myMap.size); // 输出: 2

myMap.delete('a');
console.log(myMap.has('a')); // 输出: false
```

### 使用 map 方法从数组中提取数据
目前为止，我们已经学会了使用纯函数来避免程序中的副作用。 此外，我们已经看到函数的值仅取决于其输入参数。

这仅仅是个开始。 顾名思义，函数式编程以函数理论为中心。

能够将它们作为参数传递给其他函数，从另一个函数返回一个函数是有意义的。 函数在 JavaScript 中被视为 First Class Objects，它们可以像任何其他对象一样使用。 它们可以保存在变量中，存储在对象中，也可以作为函数参数传递。

让我们从一些简单的数组函数开始，这些函数是数组对象原型上的方法。 在本练习中，我们来了解下数组的 map 方法（即 Array.prototype.map()）。

请记住，map方法是迭代数组中每一项的方式之一。 在对每个元素应用回调函数后，它会创建一个新数组(不改变原来的数组)。 它这样做时没有改变原始数组。

当调用回调函数时，传入了三个参数。 第一个参数是当前正在处理的数组项。 第二个参数是当前数组项的索引值，第三个参数是在其上调用 map 方法的数组。

看下在 users 上使用 map 方法的例子，返回了一个新数组只包含了用户的名字。 为了简化，例子里只使用了回调函数的第一个参数。
~~~
const users = [
  { name: 'John', age: 34 },
  { name: 'Amy', age: 20 },
  { name: 'camperCat', age: 10 }
];

const names = users.map(user => user.name);
console.log(names);
控制台将显示值 [ 'John', 'Amy', 'camperCat' ]。
~~~