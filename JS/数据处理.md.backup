# 数据类型转换
## 判断数据类型typeof
~~~
console.log(typeof "Hello World"); // "string"  
console.log(typeof 42); // "number"  
console.log(typeof true); // "boolean"  
console.log(typeof undefined); // "undefined"  
console.log(typeof {name: "Alice", age: 30}); // "object"  
console.log(typeof [1, 2, 3]); // "object"，但通常我们期望它是 "array"  
console.log(typeof null); // "object"，这是一个历史遗留的错误  
console.log(typeof function() {}); // "function"  
console.log(typeof Symbol("id")); // "symbol"  
console.log(typeof 123456789012345678901234567890n); // "bigint"
~~~	


## 浮点与整

在JavaScript中，你可以通过多种方式将变量所存储的浮点数转换为整型。以下是一些常用的方法：

### 1. 使用Math.floor()

`Math.floor()` 方法会向下舍入到最接近的整数，即不大于原数的最大整数。

```javascript
let floatNum = 3.14;
let intNum = Math.floor(floatNum);
console.log(intNum); // 输出: 3
```

### 2. 使用Math.round()

虽然`Math.round()`主要用于四舍五入到最接近的整数，但如果你知道浮点数的小数部分小于0.5，它也可以被用来“转换为”整型（但请注意，当小数部分恰好为0.5时，它会向上舍入）。

```javascript
let floatNum = 3.1;
let intNum = Math.round(floatNum);
console.log(intNum); // 输出: 3

// 注意：
let floatNum2 = 3.5;
let intNum2 = Math.round(floatNum2);
console.log(intNum2); // 输出: 4
```

### 3. 使用Math.ceil()

`Math.ceil()` 方法会向上舍入到最接近的整数，即不小于原数的最小整数。

```javascript
let floatNum = 3.01;
let intNum = Math.ceil(floatNum);
console.log(intNum); // 输出: 4
```
### Math.max(),Math.min()
~~~
Math.max(2,-1,5) //5
Math.min(2,-1,5) //-1 

Math.max()
Math.min()
~~~

### Math.random()随机数
~~~
Math.floor(Math.random() * 20);
你将调用 Math.random()，把结果乘以 20，然后把值传给 Math.floor()，向下取整获得最近的整数。


你可以在从零到给定数字的范围内生成随机整数。 你也可以为此范围选择一个不同的较小数字。

你将把最小的数字定义为 min，把最大的数字定义为 max。

这个公式将生成一个从 min 到 max 的随机整数。

Math.floor(Math.random() * (max - min + 1)) + min
会随机生成一个从min到max的随机数
~~~


### 4. 使用位运算符

对于正数，你可以使用位运算符`|`（按位或）与`0`进行运算，这实际上会移除小数部分，因为按位运算符会将其操作数转换为32位整数。

```javascript
let floatNum = 3.14;
let intNum = floatNum | 0;
console.log(intNum); // 输出: 3

// 注意：对于负数，这种方法的行为可能不是你期望的。
let negFloatNum = -3.14;
let negIntNum = negFloatNum | 0;
console.log(negIntNum); // 输出: -3，但行为可能因JavaScript引擎而异
```

### 5. 使用Number.parseInt() 或 parseInt()

虽然`parseInt()`主要用于解析字符串为整数，但你也可以用它来尝试从浮点数中提取整数部分。不过，这种方法并不是特别推荐，因为它依赖于字符串解析，并且当浮点数很大时可能会遇到精度问题。
~~~
parseInt() 函数解析一个字符串并返回一个整数。 它还可以传入第二个参数，指定了字符串中数字的基数。 基数可以是 2 到 36 之间的整数。

函数调用如下所示：

parseInt(string, radix);
~~~

### 6.Number()  str=>num
~~~
Number('10'); // returns the number 10
Number('abc'); // returns NaN
~~~



```javascript
let floatNum = 3.14;
let intNum = parseInt(floatNum.toString(), 10);
console.log(intNum); // 输出: 3

// 注意：对于大数或特殊情况下，这种方法的可靠性可能不如其他方法。
```

### 结论

通常，选择哪种方法取决于你的具体需求，比如你是需要向下舍入、四舍五入还是向上舍入。`Math.floor()`、`Math.round()`和`Math.ceil()`是最直接和常用的方法。


