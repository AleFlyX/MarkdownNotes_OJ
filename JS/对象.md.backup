# 对象（object）（结构体）
在JavaScript中，对象（Object）是一种复合数据类型，用于存储键值对（key-value pairs）。对象允许你将相关的数据组织成一个整体。JavaScript中的对象可以包含多个属性（properties）和方法（methods）。属性是对象中的数据字段（通常包含基本数据类型或对象类型的数据），而方法是存储在对象中的函数，用于执行与对象相关的操作。

### 创建对象

JavaScript中创建对象有几种不同的方式：

#### 1. 对象字面量

这是最直接和常用的创建对象的方法，使用花括号`{}`来定义。

```javascript
let person = {
  firstName: "John",
  lastName: "Doe",
  age: 30,
  greet: function() {  
  
   ##########在对象中创建函数
   
    console.log(`Hello, my name is ${this.firstName} ${this.lastName}.`);
  }
};

person.greet(); // 输出: Hello, my name is John Doe.
```


#### 2. 构造函数

构造函数是一个特殊类型的函数，用于初始化一个对象。它使用`new`关键字来调用，并返回一个新创建的对象。

```javascript
function Person(firstName, lastName, age) {
  this.firstName = firstName;
  this.lastName = lastName;
  this.age = age;
  this.greet = function() {
    console.log(`Hello, my name is ${this.firstName} ${this.lastName}.`);
  };
}

let person = new Person("Jane", "Doe", 25);
person.greet(); // 输出: Hello, my name is Jane Doe.
```

#### 3. Object.create()

`Object.create()`方法创建一个新对象，使用现有的对象来提供新创建的对象的`__proto__`（即原型）。

```javascript
let personProto = {
  greet: function() {
    console.log(`Hello, my name is ${this.firstName} ${this.lastName}.`);
  }
};

let person = Object.create(personProto);
person.firstName = "Alice";
person.lastName = "Wonderland";
person.greet(); // 输出: Hello, my name is Alice Wonderland.
```


#### 使用 this 关键字提高代码重用性

我们了解了该如何给 duck 对象设置一个方法。 然后在 return 语句里，我们通过使用 “点号表示法” duck.name 来获取 name 的属性值：

~~~sayName: function() {return "The name of this duck is " + duck.name + ".";}
~~~

虽然这是访问对象属性的有效方法，但是这里有一个陷阱。 如果变量名发生了改变，那么引用了原始名称的任何代码都需要更新。 在一个简短的对象定义中，这并不是问题，但是如果对象有很多对其属性的引用，那么发生错误的可能性就更大了。

我们可以使用 this 关键字来避免这一问题：

~~~
let duck = {
  name: "Aflac",
  numLegs: 2,
  sayName: function() {return "The name of this duck is " + this.name + ".";}
};
~~~

this 是一个很复杂的知识点，而上面那个例子也只是使用它的一种方法而已。 在当前的上下文环境中，this 指向的就是与这个方法有关联的 duck 对象。 如果把对象的变量名改为 mallard，那使用 this 后就没有必要在代码中找到所有指向 duck 的部分。 这样可以使得代码更具有可读性和复用性。

#### 定义构造函数
构造函数是创建对象的函数。 函数给这个新对象定义属性和行为。 可将它们视为创建的新对象的蓝图。

以下就是一个构造函数的示例：
```
function Bird() {
  this.name = "Albert";
  this.color = "blue";
  this.numLegs = 2;
}
```
这个构造函数定义了一个 Bird 对象，其属性 name、color 和 numLegs 的值分别被设置为 Albert、blue 和 2。 构造函数遵循一些惯例规则：

- 构造函数函数名的首字母大写，这是为了方便我们区分构造函数（ constructors）和其他非构造函数。
- 构造函数使用 this 关键字来给它将创建的这个对象设置新的属性。 在构造函数里面，this 指向的就是它新创建的这个对象。
- 构造函数定义了属性和行为就可创建对象，而不是像其他函数一样需要设置返回值。

#### 使用构造函数创建对象 "new"
在上一个挑战中，我们用所学到的知识创建了一个 Bird 构造函数：
~~~
function Bird() {
  this.name = "Albert";
  this.color  = "blue";
  this.numLegs = 2;
}

let blueBird = new Bird();
#####################################
相当于按照Bird的内容再创建一个结构体
所以“构造函数”的功能是自动为你创建一个指定内容的结构体/对象
######################################
注意： 构造函数内的 this 总是指被创建的对象。

注意：通过构造函数创建对象的时候要使用 new 操作符。 因为只有这样，JavaScript 才知道要给 Bird 这个构造函数创建一个新的实例：blueBird。 如果不使用 new 操作符来新建对象，那么构造函数里面的 this 就无法指向新创建的这个对象实例，从而产生不可预见的错误。 现在 blueBird 这个实例就继承了Bird 构造函数的所有属性，如下：

blueBird.name;
blueBird.color;
blueBird.numLegs;
由构造函数创建的实例也和其他对象一样，它的属性可以被访问和修改：

blueBird.name = 'Elvira';
blueBird.name;

~~~

#### 构造函数来接收参数（将构造函数人性化）
~~~
上一个挑战中 Bird 和 Dog 构造函数运行得不错。 但是，注意到没有：所有通过Bird 构造函数创建出来的实例 Birds 都自动的取名为 Albert，颜色都是蓝色，还都有两条腿。 如果你想要新创建出来的小鸟们拥有不同的名字和颜色要怎么办呢？ 当然，手动的去修改每一个小鸟实例自己的属性也是可以实现的，只是会增加很多无谓的工作量：

let swan = new Bird();
swan.name = "Carlos";
swan.color = "white";
假如你写了一个程序来追踪一个鸟舍里面的几百只甚至几千只不同的小鸟。 你将会花费很多时间去创建所有的小鸟实例并给它们的属性一一修改为不同的值。 为了减轻创建不同 Bird 对象的工作量，你可以给你的 Bird 设置为可以接收参数的构造函数：

function Bird(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}
然后将值通过参数的方式传递给 Bird 构造函数来定义每一个唯一的小鸟实例： let cardinal = new Bird("Bruce", "red"); 这给 Bird 的 name 和 color 属性分别赋值为 Bruce 和 red 色。 但 numLegs 属性仍然设置为 2。 cardinal 有以下这些属性：

cardinal.name
cardinal.color
cardinal.numLegs
这样一来构造函数就变得很灵活了。 现在可以在创建每个Bird实例时直接定义属性，这是 JavaScript 构造函数非常实用的用法之一。 它们根据共同或相似的属性和行为将对象归纳为一组，并能够自动的创建各自实例。


#################################
EXAMPLE:

创建另一个 Dog 构造函数。 这一次，给它设置两个参数：name 和 color，同时给 numLegs 赋值为 4。 然后创建一个新 Dog 实例保存为变量名：terrier。 再将两个字符串通过参数的形式传入name 和 color 属性。

function Dog(name,color) {
   this.name=name;
   this.color=color;
   this.numLegs=4;
}

let terrier=new Dog("shabi","black");

~~~

#### 使用 instanceof 验证对象的构造函数
凡是通过构造函数创建出的新对象，这个对象都叫做这个构造函数的实例。 JavaScript 提供了一种很简便的方法来验证这个事实，那就是通过 *instanceof* 操作符。 instanceof 允许你将对象与构造函数之间进行比较，根据对象是否由这个构造函数创建的返回 *true* 或者 *false*。 以下是一个示例：
~~~
let Bird = function(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}

let crow = new Bird("Alexis", "black");

crow instanceof Bird;
instanceof 方法会返回 true。

如果一个对象不是使用构造函数创建的，那么 instanceof 将会验证这个对象不是构造函数的实例：

let canary = {
  name: "Mildred",
  color: "Yellow",
  numLegs: 2
};

canary instanceof Bird;
instanceof 方法会返回 false。

~~~
##### 自有属性
请看下面的实例，Bird 构造函数定义了两个属性：name 和 numLegs。
~~~
function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let duck = new Bird("Donald");
let canary = new Bird("Tweety");
name 和 numLegs 被叫作自身属性，因为它们是直接在实例对象上定义的。 这就意味着 duck 和 canary 这两个对象分别拥有这些属性的独立副本。 事实上，Bird 的所有实例都将拥有这些属性的独立副本。 下面的代码将 duck 的所有自身属性都存到一个叫作 ownProps 的数组里面：

let ownProps = [];

for (let property in duck) {
  if(duck.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}

console.log(ownProps);
控制台显示 ["name", "numLegs"]。
~~~

#### 使用原型属性来减少重复代码

所有 Bird 实例可能会有相同的 numLegs 值，所以在每一个 Bird 的实例中本质上都有一个重复的变量 numLegs。

当只有两个实例时可能并不是什么问题，但想象一下如果有数百万个实例。 这将会产生许许多多重复的变量。

~~~
更好的方法是使用 Bird 的 prototype。 prototype 是一个可以在所有 Bird 实例之间共享的对象。 以下是一个在 Bird prototype 中添加 numLegs 属性的示例：

Bird.prototype.numLegs = 2;
现在所有的 Bird 实例都拥有了共同的 numLegs 属性值。

console.log(duck.numLegs);
console.log(canary.numLegs);
由于所有的实例都可以继承 prototype 上的属性，所以可以把 prototype 看作是创建对象的 "配方"。 请注意：duck 和 canary 的 prototype 属于 Bird 的构造函数，即 Bird 的原型 Bird.prototype。
~~~

#### 通过引用另一个对象的 prototype 来继承其属性和行为
~~~
ChildObject.prototype = Object.create(ParentObject.prototype);
~~~
## 注意*prototype添加的属性在使用.hasOwnProperty时会返回false,因为用prototype添加的属性不算是自身属性*,事例：
自身属性和 prototype 属性。 自身属性是直接在对象上定义的。 而原型属性在 prototype 上定义。
~~~
function Bird(name) {
  this.name = name;  //own property
}

Bird.prototype.numLegs = 2; // prototype property

let duck = new Bird("Donald");
这个示例会告诉你如何将 duck 的自身属性和 prototype 属性分别添加到 ownProps 数组和 prototypeProps 数组里面：

let ownProps = [];
let prototypeProps = [];

for (let property in duck) {
  if(duck.hasOwnProperty(property)) {
    ownProps.push(property);
  } else {
    prototypeProps.push(property);
  }
}

console.log(ownProps);
console.log(prototypeProps);
console.log(ownProps) 将在控制台中显示 ["name"] ，console.log(prototypeProps) 将显示 ["numLegs"]。

~~~


#### 了解构造函数属性
实例对象 duck 和 beagle 都有一个特殊的 constructor 属性：
~~~
let duck = new Bird();
let beagle = new Dog();

console.log(duck.constructor === Bird); 
console.log(beagle.constructor === Dog);
调用都将在控制台中显示 true。
~~~

需要注意到的是这个 constructor 属性是对创建这个实例的构造函数的一个引用。 constructor 属性的一个好处是可以通过检查这个属性来找出它是一个什么对象。 下面是一个例子，来看看是怎么使用的：
~~~
function joinBirdFraternity(candidate) {
  if (candidate.constructor === Bird) {
    return true;
  } else {
    return false;
  }
}
~~~
注意： 由于 constructor 属性可以被重写（在下面两节挑战中将会遇到），所以最好使用instanceof 方法来检查对象的类型。

#### 将原型更改为新对象
到目前为止，你已经可以单独给 prototype 添加属性了：
```
Bird.prototype.numLegs = 2;
需要添加多个属性的，这未免会显得拖沓。

Bird.prototype.eat = function() {
  console.log("nom nom nom");
}

Bird.prototype.describe = function() {
  console.log("My name is " + this.name);
}
```

*一种更有效的方法就是给对象的 prototype 设置为一个已经包含了属性的新对象。 这样一来，所有属性都可以一次性添加进来：*
~~~
Bird.prototype = {
  numLegs: 2, 
  likes:"draw",
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};
~~~
## *更改原型时，记得设置构造函数属性*
手动设置一个新对象的原型有一个重要的副作用。 它清除了 constructor 属性！ 此属性可以用来检查是哪个构造函数创建了实例，但由于该属性已被覆盖，它现在给出了错误的结果：
```
duck.constructor === Bird;
duck.constructor === Object;
duck instanceof Bird;
按顺序，这些表达式会返回 false、true 和 true。
```

为了解决这个问题，凡是手动给新对象重新设置过原型对象的，都别忘记在原型对象中定义一个 constructor 属性：
```
Bird.prototype = {
  constructor: Bird,
  numLegs: 2,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name); 
  }
};

```

#### 了解对象的原型来自哪里
就像人们从父母那里继承基因一样，对象也可直接从创建它的构造函数那里继承其 prototype。 请看下面的例子：Bird 构造函数创建了一个 duck 对象：
~~~
function Bird(name) {
  this.name = name;
}

let duck = new Bird("Donald");
duck 从 Bird 构造函数那里继承了它的 prototype。 你可以使用 isPrototypeOf 方法来验证他们之间的关系：

Bird.prototype.isPrototypeOf(duck);
这将返回 true。
~~~

#### 将子辈的原型设置为父辈的实例
在上一个挑战中，我们学习了从超类（或者叫父类） Animal 继承其行为的第一个步骤：创建一个 Animal 的新实例。

这一节挑战我们将学习第二个步骤：给子类型（或者子类）设置 prototype。 这样一来，Bird 就是 Animal 的一个实例了。
 
~~~
Bird.prototype = Object.create(Animal.prototype);
~~~

请记住，prototype 类似于创建对象的“配方”。 从某种意义上来说，Bird 对象的配方包含了 Animal 的所有关键“成分”。
~~~
let duck = new Bird("Donald");
duck.eat();
duck 继承了Animal 的所有属性，其中包括了 eat 方法。
~~~

#### 使用 Mixin 在不相关对象之间添加共同行为
正如你所见，行为是可以通过继承来共享的。 然而，在有些情况下，继承不是最好的解决方案。 继承不适用于不相关的对象，比如 Bird 和 Airplane。 虽然它们都可以飞行，但是 Bird 并不是一种 Airplane，反之亦然。

对于不相关的对象，更好的方法是使用 mixins。 mixin 允许其他对象使用函数集合。
~~~
let flyMixin = function(obj) {
  obj.fly = function() {
    console.log("Flying, wooosh!");
  }
};
flyMixin 能接受任何对象，并为其提供 fly 方法。

let bird = {
  name: "Donald",
  numLegs: 2
};

let plane = {
  model: "777",
  numPassengers: 524
};

flyMixin(bird);
flyMixin(plane);
~~~

这里的 flyMixin 接收了bird 和 plane 对象，然后将 fly 方法分配给了每一个对象。 现在 bird 和 plane 都可以飞行了：
~~~
bird.fly();
plane.fly();
控制台将显示字符串 Flying, wooosh! 两次，每次 .fly() 调用都会显示。
~~~

注意观察 mixin 是如何允许相同的 fly 方法被不相关的对象 bird 和 plane 重用的。

### 访问对象属性

- **点符号（`.`）**：`objectName.propertyName`
- **方括号（`[]`）**：`objectName["propertyName"]`（主要用于属性名包含特殊字符或动态属性名）

例如
~~~

const myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock",
  "NoSpace": "USS Enterprise"
  name:"Mark"
};

myObj["Space Name"];
myObj['More Space'];
myObj["NoSpace"];
myObj.name;

~~~


### 访问嵌套对象属性
~~~

const ourPets = [
  {
    animalType: "cat",
    names: [
      "Meowzer",
      "Fluffy",
      "Kit-Cat"
    ]
  },
  {
    animalType: "dog",
    names: [
      "Spot",
      "Bowser",
      "Frankie"
    ]
  }
];

ourPets[0].names[1];
ourPets[1].names[0];
~~~



### 修改对象属性

你可以直接通过赋值来修改对象的属性。

```javascript
person.age = 31;
```


### 删除对象属性

使用`delete`操作符可以删除对象的属性。

```javascript
delete person.age;
```


### 遍历对象属性

- **for...in循环**：遍历对象自身的和继承的可枚举属性（包括原型链上的属性）。
- **Object.keys()**：返回一个由给定对象的自身属性键组成的数组，不包括原型链中的键。
- **Object.values()**：返回一个由给定对象自身的所有可枚举属性值的数组，值的顺序与使用`for...in`循环遍历该对象时返回的顺序一致（不考虑原型链中的属性）。
- **Object.entries()**：返回一个给定对象自身可枚举属性的键值对数组，其排列与使用`for...in`循环遍历该对象时返回的顺序一致（不考虑原型链中的属性）。


## 了解立即调用函数表达（IIFE）
JavaScript 中的一个常见模式就是，函数在声明后立刻执行：
~~~
(function () {
  console.log("Chirp, chirp!");
})();
这是一个匿名函数表达式，立即执行并输出 Chirp, chirp!。
~~~

请注意，函数没有名称，也不存储在变量中。 函数表达式末尾的两个括号（）会让它被立即执行或调用。 这种模式被叫做立即调用函数表达式（immediately invoked function expression) 或者IIFE。



